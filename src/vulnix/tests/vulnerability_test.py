from vulnix.vulnerability import Vulnerability, Node
import json
import pkg_resources


def load(cve):
    return json.loads(pkg_resources.resource_string(
        'vulnix', 'tests/fixtures/{}.json'.format(cve)))


def test_parse_single_matches():
    v = Vulnerability.parse(load('CVE-2016-2183'))
    # redhat entries do not get compressed, python & openssl do
    assert v.nodes == [
        Node('redhat', 'jboss_enterprise_application_platform', ['=6.0.0']),
        Node('redhat', 'jboss_enterprise_web_server', ['=1.0.0']),
        Node('redhat', 'jboss_enterprise_web_server', ['=2.0.0']),
        Node('redhat', 'jboss_web_server', ['=3.0']),
        Node('python', 'python', ['=3.3']),
        Node('python', 'python', ['=3.4.0']),
        Node('python', 'python', ['=3.5']),
        Node('python', 'python', ['=3.6']),
        Node('openssl', 'openssl', ['=1.0.1a']),
        Node('openssl', 'openssl', ['=1.0.1b']),
        Node('openssl', 'openssl', ['=1.0.1c']),
        Node('openssl', 'openssl', ['=1.0.2a']),
        Node('openssl', 'openssl', ['=1.0.2b']),
        Node('openssl', 'openssl', ['=1.0.2c']),
    ]
    assert v.match('openssl', '1.0.1a')
    assert not v.match('openssl', '1.0.1d')


def test_ignore_AND_operator():
    # The AND operators are usually incomplete or incorrect. We prefer to get a
    # few more false positives by ignoring them altogether.
    v = Vulnerability.parse(load('CVE-2010-0748'))
    assert v.nodes == [
        Node('transmissionbt', 'transmission', ['<1.92'])
    ]
    assert v.match('transmission', '1.91')
    assert not v.match('transmission', '1.92')


def test_product_not_found(nvd):
    assert [] == nvd.by_product('nonexistent-product')


def test_str():
    assert 'CVE-2016-2183', Vulnerability(
        'CVE-2016-2183', Node('openssl', 'openssl', ['=1.0.1a']))


def test_match_multiple_version_ranges():
    v = Vulnerability.parse(load('CVE-2019-11041'))
    assert v.match('php', '7.2.20')
    assert not v.match('php', '7.2.21')
